import { ReactNode, useState } from "react";

import { useSpring, animated, config, easings } from "@react-spring/web";

const TOTAL_LENGTH = 1090.7210693359375;
const SvgImage1 = () => {
	const [flip, set] = useState(false);
	const style = useSpring({
		from: { x: 0 },
		x: 1,
		reverse: flip,
		reset: true,
		config: {
			duration: 2000,
			easing: easings.easeInOutQuart,
		},
		onRest: () => set(!flip),
	});

	return (
		<svg
			width="430"
			height="129"
			viewBox="0 0 430 129"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
		>
			<g opacity="0.25">
				<animated.path
					d="M429.5 40C429.5 42.5213 427.806 45.0875 424.319 47.659C420.846 50.2209 415.692 52.713 409.007 55.0989C395.642 59.8685 376.275 64.1724 352.309 67.7899C304.385 75.0237 238.161 79.5 165 79.5C91.8392 79.5 25.6154 75.0237 -22.3087 67.7899C-46.2746 64.1724 -65.6419 59.8685 -79.0069 55.0989C-85.6925 52.713 -90.8463 50.2209 -94.3193 47.659C-97.8055 45.0875 -99.5 42.5213 -99.5 40C-99.5 37.4787 -97.8055 34.9125 -94.3193 32.341C-90.8463 29.7791 -85.6925 27.287 -79.0069 24.9011C-65.6419 20.1315 -46.2746 15.8276 -22.3087 12.2101C25.6154 4.97631 91.8392 0.5 165 0.5C238.161 0.5 304.385 4.97631 352.309 12.2101C376.275 15.8276 395.642 20.1315 409.007 24.9011C415.692 27.287 420.846 29.7791 424.319 32.341C427.806 34.9125 429.5 37.4787 429.5 40Z"
					stroke="white"
					strokeDasharray={TOTAL_LENGTH}
					strokeDashoffset={style.x.to((x) => (1 - x) * TOTAL_LENGTH)}
				/>
				<animated.path
					d="M429.5 52C429.5 54.5213 427.806 57.0875 424.319 59.659C420.846 62.2209 415.692 64.713 409.007 67.0989C395.642 71.8685 376.275 76.1724 352.309 79.7899C304.385 87.0237 238.161 91.5 165 91.5C91.8392 91.5 25.6154 87.0237 -22.3087 79.7899C-46.2746 76.1724 -65.6419 71.8685 -79.0069 67.0989C-85.6925 64.713 -90.8463 62.2209 -94.3193 59.659C-97.8055 57.0875 -99.5 54.5213 -99.5 52C-99.5 49.4787 -97.8055 46.9125 -94.3193 44.341C-90.8463 41.7791 -85.6925 39.287 -79.0069 36.9011C-65.6419 32.1315 -46.2746 27.8276 -22.3087 24.2101C25.6154 16.9763 91.8392 12.5 165 12.5C238.161 12.5 304.385 16.9763 352.309 24.2101C376.275 27.8276 395.642 32.1315 409.007 36.9011C415.692 39.287 420.846 41.7791 424.319 44.341C427.806 46.9125 429.5 49.4787 429.5 52Z"
					stroke="white"
					strokeDasharray={TOTAL_LENGTH}
					strokeDashoffset={style.x.to((x) => (1 - x) * TOTAL_LENGTH)}
				/>
				<animated.path
					d="M429.5 65C429.5 67.5213 427.806 70.0875 424.319 72.659C420.846 75.2209 415.692 77.713 409.007 80.0989C395.642 84.8685 376.275 89.1724 352.309 92.7899C304.385 100.024 238.161 104.5 165 104.5C91.8392 104.5 25.6154 100.024 -22.3087 92.7899C-46.2746 89.1724 -65.6419 84.8685 -79.0069 80.0989C-85.6925 77.713 -90.8463 75.2209 -94.3193 72.659C-97.8055 70.0875 -99.5 67.5213 -99.5 65C-99.5 62.4787 -97.8055 59.9125 -94.3193 57.341C-90.8463 54.7791 -85.6925 52.287 -79.0069 49.9011C-65.6419 45.1315 -46.2746 40.8276 -22.3087 37.2101C25.6154 29.9763 91.8392 25.5 165 25.5C238.161 25.5 304.385 29.9763 352.309 37.2101C376.275 40.8276 395.642 45.1315 409.007 49.9011C415.692 52.287 420.846 54.7791 424.319 57.341C427.806 59.9125 429.5 62.4787 429.5 65Z"
					stroke="white"
					strokeDasharray={TOTAL_LENGTH}
					strokeDashoffset={style.x.to((x) => (1 - x) * TOTAL_LENGTH)}
				/>
				<animated.path
					d="M429.5 77C429.5 79.5213 427.806 82.0875 424.319 84.659C420.846 87.2209 415.692 89.713 409.007 92.0989C395.642 96.8685 376.275 101.172 352.309 104.79C304.385 112.024 238.161 116.5 165 116.5C91.8392 116.5 25.6154 112.024 -22.3087 104.79C-46.2746 101.172 -65.6419 96.8685 -79.0069 92.0989C-85.6925 89.713 -90.8463 87.2209 -94.3193 84.659C-97.8055 82.0875 -99.5 79.5213 -99.5 77C-99.5 74.4787 -97.8055 71.9125 -94.3193 69.341C-90.8463 66.7791 -85.6925 64.287 -79.0069 61.9011C-65.6419 57.1315 -46.2746 52.8276 -22.3087 49.2101C25.6154 41.9763 91.8392 37.5 165 37.5C238.161 37.5 304.385 41.9763 352.309 49.2101C376.275 52.8276 395.642 57.1315 409.007 61.9011C415.692 64.287 420.846 66.7791 424.319 69.341C427.806 71.9125 429.5 74.4787 429.5 77Z"
					stroke="white"
					strokeDasharray={TOTAL_LENGTH}
					strokeDashoffset={style.x.to((x) => (1 - x) * TOTAL_LENGTH)}
				/>
				<animated.path
					d="M429.5 89C429.5 91.5213 427.806 94.0875 424.319 96.659C420.846 99.2209 415.692 101.713 409.007 104.099C395.642 108.868 376.275 113.172 352.309 116.79C304.385 124.024 238.161 128.5 165 128.5C91.8392 128.5 25.6154 124.024 -22.3087 116.79C-46.2746 113.172 -65.6419 108.868 -79.0069 104.099C-85.6925 101.713 -90.8463 99.2209 -94.3193 96.659C-97.8055 94.0875 -99.5 91.5213 -99.5 89C-99.5 86.4787 -97.8055 83.9125 -94.3193 81.341C-90.8463 78.7791 -85.6925 76.287 -79.0069 73.9011C-65.6419 69.1315 -46.2746 64.8276 -22.3087 61.2101C25.6154 53.9763 91.8392 49.5 165 49.5C238.161 49.5 304.385 53.9763 352.309 61.2101C376.275 64.8276 395.642 69.1315 409.007 73.9011C415.692 76.287 420.846 78.7791 424.319 81.341C427.806 83.9125 429.5 86.4787 429.5 89Z"
					stroke="white"
				/>
			</g>
		</svg>
	);
};

const skills = [
	{
		title: "React",
	},
	{
		title: "JS/HTML/CSS",
	},
	{
		title: "Nodejs",
	},
	{
		title: "Package Manager",
	},
	{
		title: "Bundler/Webpack",
	},
	{
		title: "Testing",
	},
	{
		title: "CI/CD",
	},
	{
		title: "Github",
	},
] as const;

function App() {
	const socialMedia = [
		{
			title: "github",
			component: (
				<animated.svg viewBox="0 0 24 24" className="w-6 h-6">
					<animated.path
						fill="currentColor"
						d="M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z"
					/>
				</animated.svg>
			),
			link: "https://github.com/PhilipBrodovsky",
		},
		{
			title: "linkedin",
			component: (
				<animated.svg viewBox="0 0 24 24" className="w-6 h-6">
					<path
						fill="currentColor"
						d="M19 3A2 2 0 0 1 21 5V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V5A2 2 0 0 1 5 3H19M18.5 18.5V13.2A3.26 3.26 0 0 0 15.24 9.94C14.39 9.94 13.4 10.46 12.92 11.24V10.13H10.13V18.5H12.92V13.57C12.92 12.8 13.54 12.17 14.31 12.17A1.4 1.4 0 0 1 15.71 13.57V18.5H18.5M6.88 8.56A1.68 1.68 0 0 0 8.56 6.88C8.56 5.95 7.81 5.19 6.88 5.19A1.69 1.69 0 0 0 5.19 6.88C5.19 7.81 5.95 8.56 6.88 8.56M8.27 18.5V10.13H5.5V18.5H8.27Z"
					/>
				</animated.svg>
			),
			link: "https://www.linkedin.com/in/philip-brodovsky-109515142/",
		},
	] as const;

	return (
		<div className="bg-[#151515] text-white font-primary">
			<div className="container mx-auto px-2">
				<nav className="flex justify-between border-white border-b pb-12">
					<div className="w-3/5 p-4 flex flex-col gap-16 relative">
						<div className="absolute -translate-x-1/2 top-16">
							<SvgImage1 />
						</div>
						<span className="uppercase font-bold text-2xl">Philip Brodovsky</span>
						<div className="flex flex-col gap-8 items-start">
							<h1 className="font-bold text-8xl">Nice to meet you! Im Philip</h1>
							<p className="w-96">
								I like to solve problems of all kinds, likes to look for solutions that
								affect a company, and make the company more profitable, effective, and happy
								:)
							</p>

							<Button>contact me</Button>
						</div>
					</div>
					<div className="w-2/5 bg-[#242424] p-4 flex flex-col gap-8">
						<div className="flex gap-4 justify-end">
							{socialMedia.map((social) => (
								<div
									className="cursor-pointer"
									onClick={() => window.open(social.link, "_blank")}
								>
									{social.component}
								</div>
							))}
						</div>
						<div className="-m-4 relative">
							<img src="/me.png" alt="photo" className="object-cover h-full" />
							<svg
								width="129"
								height="129"
								viewBox="0 0 129 129"
								fill="none"
								xmlns="http://www.w3.org/2000/svg"
								className="rotate absolute -left-16 bottom-1/4"
							>
								<circle id="Oval" cx="64.5" cy="64.5" r="64" stroke="white" />
							</svg>
						</div>
					</div>
				</nav>
				{/* skills */}
				<div className="grid grid-cols-3 gap-12 my-12 ">
					{skills.map((skill) => (
						<div className="" key={skill.title}>
							<h2 className="font-bold text-4xl mb-4">{skill.title}</h2>
							<span>Skill</span>
						</div>
					))}
				</div>
				<Projects />
			</div>
		</div>
	);
}

function Projects() {
	const projects = [
		{
			title: "GLIZBRO",
			description: "Dating app, becouse serious relationship, require focus",
			image: "/glizbro.png",
			link: "https://glizbro.com",
		},
	];

	const [flip, set] = useState(false);
	const style = useSpring({
		from: { x: 0 },
		x: 1,
		reverse: flip,
		reset: true,
		config: {
			duration: 2000,
			easing: easings.easeInOutQuart,
		},
		onRest: () => set(!flip),
	});
	return (
		<div className="mt-12 py-12">
			<div className="mb-20">
				<h2 className="text-5xl font-semibold">
					<svg
						width="326"
						height="81"
						viewBox="0 0 326 81"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
					>
						<animated.path
							d="M0.808 63V1.4H26.152C30.024 1.4 33.4267 2.192 36.36 3.776C39.352 5.30133 41.6693 7.472 43.312 10.288C45.0133 13.104 45.864 16.448 45.864 20.32V21.552C45.864 25.3653 44.984 28.7093 43.224 31.584C41.5227 34.4 39.176 36.6 36.184 38.184C33.2507 39.7093 29.9067 40.472 26.152 40.472H12.424V63H0.808ZM12.424 29.912H25.008C27.7653 29.912 29.9947 29.1493 31.696 27.624C33.3973 26.0987 34.248 24.016 34.248 21.376V20.496C34.248 17.856 33.3973 15.7733 31.696 14.248C29.9947 12.7227 27.7653 11.96 25.008 11.96H12.424V29.912ZM51.7694 63V19.352H62.6814V24.28H64.2654C64.9107 22.52 65.9667 21.2293 67.4334 20.408C68.9587 19.5867 70.7187 19.176 72.7134 19.176H77.9934V29.032H72.5374C69.7214 29.032 67.404 29.7947 65.5854 31.32C63.7667 32.7867 62.8574 35.0747 62.8574 38.184V63H51.7694ZM103.381 64.232C99.0398 64.232 95.1385 63.352 91.6771 61.592C88.2158 59.832 85.4878 57.28 83.4931 53.936C81.4985 50.592 80.5011 46.5733 80.5011 41.88V40.472C80.5011 35.7787 81.4985 31.76 83.4931 28.416C85.4878 25.072 88.2158 22.52 91.6771 20.76C95.1385 19 99.0398 18.12 103.381 18.12C107.722 18.12 111.624 19 115.085 20.76C118.546 22.52 121.274 25.072 123.269 28.416C125.264 31.76 126.261 35.7787 126.261 40.472V41.88C126.261 46.5733 125.264 50.592 123.269 53.936C121.274 57.28 118.546 59.832 115.085 61.592C111.624 63.352 107.722 64.232 103.381 64.232ZM103.381 54.376C106.784 54.376 109.6 53.2907 111.829 51.12C114.058 48.8907 115.173 45.7227 115.173 41.616V40.736C115.173 36.6293 114.058 33.4907 111.829 31.32C109.658 29.0907 106.842 27.976 103.381 27.976C99.9785 27.976 97.1625 29.0907 94.9331 31.32C92.7038 33.4907 91.5891 36.6293 91.5891 40.736V41.616C91.5891 45.7227 92.7038 48.8907 94.9331 51.12C97.1625 53.2907 99.9785 54.376 103.381 54.376ZM125.9 80.6V71.096H131.708C133.351 71.096 134.172 70.216 134.172 68.456V19.352H145.26V70.744C145.26 73.736 144.38 76.112 142.62 77.872C140.86 79.6907 138.513 80.6 135.58 80.6H125.9ZM139.716 14.248C137.721 14.248 136.02 13.6027 134.612 12.312C133.263 11.0213 132.588 9.32 132.588 7.208C132.588 5.096 133.263 3.39466 134.612 2.104C136.02 0.81333 137.721 0.167996 139.716 0.167996C141.769 0.167996 143.471 0.81333 144.82 2.104C146.169 3.39466 146.844 5.096 146.844 7.208C146.844 9.32 146.169 11.0213 144.82 12.312C143.471 13.6027 141.769 14.248 139.716 14.248ZM174.931 64.232C170.589 64.232 166.747 63.3227 163.403 61.504C160.117 59.6267 157.536 57.016 155.659 53.672C153.84 50.2693 152.931 46.28 152.931 41.704V40.648C152.931 36.072 153.84 32.112 155.659 28.768C157.477 25.3653 160.029 22.7547 163.315 20.936C166.6 19.0587 170.413 18.12 174.755 18.12C179.037 18.12 182.763 19.088 185.931 21.024C189.099 22.9013 191.563 25.5413 193.323 28.944C195.083 32.288 195.963 36.1893 195.963 40.648V44.432H164.195C164.312 47.424 165.427 49.8587 167.539 51.736C169.651 53.6133 172.232 54.552 175.283 54.552C178.392 54.552 180.68 53.8773 182.147 52.528C183.613 51.1787 184.728 49.6827 185.491 48.04L194.555 52.792C193.733 54.3173 192.531 55.9893 190.947 57.808C189.421 59.568 187.368 61.0933 184.787 62.384C182.205 63.616 178.92 64.232 174.931 64.232ZM164.283 36.16H184.699C184.464 33.6373 183.437 31.6133 181.619 30.088C179.859 28.5627 177.541 27.8 174.667 27.8C171.675 27.8 169.299 28.5627 167.539 30.088C165.779 31.6133 164.693 33.6373 164.283 36.16ZM223.836 64.232C219.612 64.232 215.769 63.352 212.308 61.592C208.905 59.832 206.207 57.28 204.212 53.936C202.217 50.592 201.22 46.544 201.22 41.792V40.56C201.22 35.808 202.217 31.76 204.212 28.416C206.207 25.072 208.905 22.52 212.308 20.76C215.769 19 219.612 18.12 223.836 18.12C228.001 18.12 231.58 18.8533 234.572 20.32C237.564 21.7867 239.969 23.8107 241.788 26.392C243.665 28.9147 244.897 31.7893 245.484 35.016L234.748 37.304C234.513 35.544 233.985 33.96 233.164 32.552C232.343 31.144 231.169 30.0293 229.644 29.208C228.177 28.3867 226.329 27.976 224.1 27.976C221.871 27.976 219.847 28.4747 218.028 29.472C216.268 30.4107 214.86 31.848 213.804 33.784C212.807 35.6613 212.308 37.9787 212.308 40.736V41.616C212.308 44.3733 212.807 46.72 213.804 48.656C214.86 50.5333 216.268 51.9707 218.028 52.968C219.847 53.9067 221.871 54.376 224.1 54.376C227.444 54.376 229.967 53.5253 231.668 51.824C233.428 50.064 234.543 47.776 235.012 44.96L245.748 47.512C244.985 50.6213 243.665 53.4667 241.788 56.048C239.969 58.5707 237.564 60.5653 234.572 62.032C231.58 63.4987 228.001 64.232 223.836 64.232ZM267.739 63C264.865 63 262.518 62.12 260.699 60.36C258.939 58.5413 258.059 56.136 258.059 53.144V28.504H247.147V19.352H258.059V5.8H269.147V19.352H281.115V28.504H269.147V51.208C269.147 52.968 269.969 53.848 271.611 53.848H280.059V63H267.739ZM306.78 64.232C301.09 64.232 296.426 63 292.788 60.536C289.151 58.072 286.951 54.552 286.188 49.976L296.396 47.336C296.807 49.3893 297.482 51.0027 298.42 52.176C299.418 53.3493 300.62 54.2 302.028 54.728C303.495 55.1973 305.079 55.432 306.78 55.432C309.362 55.432 311.268 54.992 312.5 54.112C313.732 53.1733 314.348 52.0293 314.348 50.68C314.348 49.3307 313.762 48.304 312.588 47.6C311.415 46.8373 309.538 46.2213 306.956 45.752L304.492 45.312C301.442 44.7253 298.655 43.9333 296.132 42.936C293.61 41.88 291.586 40.4427 290.06 38.624C288.535 36.8053 287.772 34.4587 287.772 31.584C287.772 27.2427 289.356 23.928 292.524 21.64C295.692 19.2933 299.858 18.12 305.02 18.12C309.89 18.12 313.938 19.2053 317.164 21.376C320.391 23.5467 322.503 26.392 323.5 29.912L313.204 33.08C312.735 30.8507 311.767 29.2667 310.3 28.328C308.892 27.3893 307.132 26.92 305.02 26.92C302.908 26.92 301.295 27.3013 300.18 28.064C299.066 28.768 298.508 29.7653 298.508 31.056C298.508 32.464 299.095 33.52 300.268 34.224C301.442 34.8693 303.026 35.368 305.02 35.72L307.484 36.16C310.77 36.7467 313.732 37.5387 316.372 38.536C319.071 39.4747 321.183 40.8533 322.708 42.672C324.292 44.432 325.084 46.8373 325.084 49.888C325.084 54.464 323.412 58.0133 320.068 60.536C316.783 63 312.354 64.232 306.78 64.232Z"
							strokeDasharray={1763}
							strokeDashoffset={style.x.to((x) => (1 - x) * 1763)}
							fill="white"
						/>
					</svg>
				</h2>
			</div>
			<div className="flex justify-center">
				{projects.map((project) => {
					return (
						<div
							onClick={() => {
								window.open(project.link, "_blank");
							}}
							className="w-1/2 flex flex-col gap-4 cursor-pointer "
							key={project.title}
						>
							<div className="overflow-hidden rounded-md ">
								<img
									src={project.image}
									alt="project"
									className="rounded-md hover:scale-150 transition-all duration-500 object-cover object-center w-full"
								/>
							</div>
							<h3 className="font-semibold text-2xl rounded-md">{project.title}</h3>
							<p>{project.description}</p>
						</div>
					);
				})}
			</div>
		</div>
	);
}

function Button(props: { children: ReactNode }) {
	const { children } = props;
	return (
		<button className="uppercase  transition-all duration-300 text-md font-semibold border-b-2 flex justify-center items-center border-[#4EE1A0] hover:text-[#4EE1A0]">
			{children}
		</button>
	);
}

export default App;
